Допустим, что нам нужны классы, экземпляры которых содержат разную информацию. Например, нам нужно создать экземпляр класса, который содержит в себе информацию о росте и весе какого-то баскетболиста и экземпляр класса, который содержит информацию о команде и игровом номере другого баскетболиста. Одним из способов реализации вышеописанных классов является собственно создание для каждой цели отдельного класса, то есть класс, который содержит информацию о росте и весе, и класс, который содержит информацию о команде и игровом номере. Если нам понадобятся классы, содержащие какую-то еще дополнительную информацию, то тогда писать для каждой нужды отдельный класс будет слишком долго и неудобно. Кроме того, количество этих классов может увеличиваться в геометрической прогрессии. Избежать этого поможет декоратор. Он работает следующим образом: создается какой-то 'главный' класс, экземпляр которого будет передаваться в наследуемые классы в качестве аргумента, а в самих наследуемых классах мы уже можем добавлять функциии, свойства и тд к экземпляру 'главного класса'.